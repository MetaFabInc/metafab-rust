/*
 * MetaFab API
 *
 *  Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * The version of the OpenAPI document: 1.4.1
 * Contact: metafabproject@gmail.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct BatchMintCollectionItemsRequest {
    /// A valid EVM based address to create (mint) the items for. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`.
    #[serde(rename = "address", skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    /// An array of unique itemIds to create (mint).
    #[serde(rename = "itemIds")]
    pub item_ids: Vec<i32>,
    /// An array of the quantities of each of the unique itemIds provided to create (mint). The quantity of each itemId in itemIds should be at the same index as the specific itemId in the itemIds array. For example, quantities[2] defines the quantity to mint for itemIds[2], etc.
    #[serde(rename = "quantities")]
    pub quantities: Vec<i32>,
    /// Any wallet id within the MetaFab ecosystem to create (mint) the items for.
    #[serde(rename = "walletId", skip_serializing_if = "Option::is_none")]
    pub wallet_id: Option<String>,
}

impl BatchMintCollectionItemsRequest {
    pub fn new(item_ids: Vec<i32>, quantities: Vec<i32>) -> BatchMintCollectionItemsRequest {
        BatchMintCollectionItemsRequest {
            address: None,
            item_ids,
            quantities,
            wallet_id: None,
        }
    }
}


