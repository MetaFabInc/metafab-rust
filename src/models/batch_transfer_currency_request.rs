/*
 * MetaFab API
 *
 *  Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * The version of the OpenAPI document: 1.4.1
 * Contact: metafabproject@gmail.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct BatchTransferCurrencyRequest {
    /// An array of valid EVM based addresses to transfer currency to.
    #[serde(rename = "addresses", skip_serializing_if = "Option::is_none")]
    pub addresses: Option<Vec<String>>,
    /// An array of wallet ids within the MetaFab ecosystem to transfer currency to.
    #[serde(rename = "walletIds", skip_serializing_if = "Option::is_none")]
    pub wallet_ids: Option<Vec<String>>,
    /// An array of currency amounts to transfer. Ordering corresponds to the ordering of provided `addresses` and/or `walletIds`. If both `addresses` and `walletIds` are provided, `addresses` are first in the order.
    #[serde(rename = "amounts")]
    pub amounts: Vec<f32>,
    /// An optional array of uint256 numbers to reference each transfer in the batch. Ordering corresponds to the ordering of provided `addresses` or `walletIds`. If both `addresses` and `walletIds` are provided, `addresses` are first in the order.
    #[serde(rename = "references", skip_serializing_if = "Option::is_none")]
    pub references: Option<Vec<f32>>,
}

impl BatchTransferCurrencyRequest {
    pub fn new(amounts: Vec<f32>) -> BatchTransferCurrencyRequest {
        BatchTransferCurrencyRequest {
            addresses: None,
            wallet_ids: None,
            amounts,
            references: None,
        }
    }
}


