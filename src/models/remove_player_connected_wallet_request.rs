/*
 * MetaFab API
 *
 * Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * The version of the OpenAPI document: 1.5.1
 * Contact: metafabproject@gmail.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct RemovePlayerConnectedWalletRequest {
    /// The address of the external wallet to remove from a player.
    #[serde(rename = "address")]
    pub address: String,
    /// Any positive integer that hasn't been used previously to connect or disconnect this external wallet. Must be the same nonce used to generate the `signature`.
    #[serde(rename = "nonce")]
    pub nonce: i32,
    /// A signature string generated by signing a keccak256 hash generated with abiCoder encode arguments of `[ 'bytes32', 'address', 'bool', 'address', 'uint256' ]` and `[ keccak256(gameId), delegate wallet unapproved (player's custodial wallet address), false, external wallet address, any unused nonce number ]`.
    #[serde(rename = "signature")]
    pub signature: String,
    /// The blockchain you want to remove this wallet connection on. If you need to remove it on multiple blockchains, make multiple requests using different `chain` arguments. Support for new blockchains are added over time.
    #[serde(rename = "chain")]
    pub chain: Chain,
}

impl RemovePlayerConnectedWalletRequest {
    pub fn new(address: String, nonce: i32, signature: String, chain: Chain) -> RemovePlayerConnectedWalletRequest {
        RemovePlayerConnectedWalletRequest {
            address,
            nonce,
            signature,
            chain,
        }
    }
}

/// The blockchain you want to remove this wallet connection on. If you need to remove it on multiple blockchains, make multiple requests using different `chain` arguments. Support for new blockchains are added over time.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Chain {
    #[serde(rename = "ARBITRUM")]
    Arbitrum,
    #[serde(rename = "ARBITRUMGOERLI")]
    Arbitrumgoerli,
    #[serde(rename = "ARBITRUMNOVA")]
    Arbitrumnova,
    #[serde(rename = "AVALANCHE")]
    Avalanche,
    #[serde(rename = "AVALANCHEFUJI")]
    Avalanchefuji,
    #[serde(rename = "ETHEREUM")]
    Ethereum,
    #[serde(rename = "FANTOM")]
    Fantom,
    #[serde(rename = "FANTOMTEST")]
    Fantomtest,
    #[serde(rename = "GOERLI")]
    Goerli,
    #[serde(rename = "MATIC")]
    Matic,
    #[serde(rename = "MATICMUMBAI")]
    Maticmumbai,
    #[serde(rename = "THUNDERCORE")]
    Thundercore,
    #[serde(rename = "THUNDERCORETESTNET")]
    Thundercoretestnet,
}

impl Default for Chain {
    fn default() -> Chain {
        Self::Arbitrum
    }
}

