/*
 * MetaFab API
 *
 *  Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * The version of the OpenAPI document: 1.1.3
 * Contact: metafabproject@gmail.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct CreateCollectionItemRequest {
    /// A unique itemId to use for this item within the collection. If an existing itemId is used, the current metadata will be overriden. Any number may be used.  The terms `itemId` and `collectionItemId` are used interchangeably and equivalent to one another throughout MetaFab documentation.
    #[serde(rename = "id")]
    pub id: f32,
    /// The name of this item.
    #[serde(rename = "name")]
    pub name: String,
    /// A text description of this item. This is a great spot to include lore, game mechanics and more related to this item.
    #[serde(rename = "description")]
    pub description: String,
    /// A base64 string of the image for this item. Either `imageBase64` or `imageUrl` must be provided. Supported image formats are `jpg`, `jpeg`, `png`, `gif`. Recommended size of 1:1 aspect ratio and no more than 1500x1500 pixels.
    #[serde(rename = "imageBase64", skip_serializing_if = "Option::is_none")]
    pub image_base64: Option<String>,
    /// An external url that resolves to an image to use for this item. This can also be set to an ipfs:// uri. Recommended size of 1:1 aspect ratio and no more than 1500x1500 pixels.
    #[serde(rename = "imageUrl", skip_serializing_if = "Option::is_none")]
    pub image_url: Option<String>,
    /// An optional URL where players can go to learn more about this item specifically, or your game, or any other link.
    #[serde(rename = "externalUrl", skip_serializing_if = "Option::is_none")]
    pub external_url: Option<String>,
    /// An array of objects that conform with metadata standard.
    #[serde(rename = "attributes", skip_serializing_if = "Option::is_none")]
    pub attributes: Option<Vec<crate::models::CreateCollectionItemRequestAttributesInner>>,
    /// An arbitrary object of data attached to the top level metadata object. This is useful for including data or resource URLs specific to your game. Such as URLs that point to
    #[serde(rename = "data", skip_serializing_if = "Option::is_none")]
    pub data: Option<serde_json::Value>,
}

impl CreateCollectionItemRequest {
    pub fn new(id: f32, name: String, description: String) -> CreateCollectionItemRequest {
        CreateCollectionItemRequest {
            id,
            name,
            description,
            image_base64: None,
            image_url: None,
            external_url: None,
            attributes: None,
            data: None,
        }
    }
}


