/*
 * MetaFab API
 *
 * Complete MetaFab API references and guides can be found at: https://trymetafab.com
 *
 * The version of the OpenAPI document: 1.5.1
 * Contact: metafabproject@gmail.com
 * Generated by: https://openapi-generator.tech
 */

/// ProfilePermissionsValue : Key should be the contract address, value is the permissions object request for the contract.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ProfilePermissionsValue {
    /// The target chain for the contract and related permissions.
    #[serde(rename = "chain", skip_serializing_if = "Option::is_none")]
    pub chain: Option<String>,
    /// An optional array of valid permissioning scopes.
    #[serde(rename = "scopes", skip_serializing_if = "Option::is_none")]
    pub scopes: Option<Vec<String>>,
    /// An optional array of contract functions to request permission for.
    #[serde(rename = "functions", skip_serializing_if = "Option::is_none")]
    pub functions: Option<Vec<String>>,
    /// A maximum lifetime limit of erc20 that can be tranferred for this contract address.
    #[serde(rename = "erc20Limit", skip_serializing_if = "Option::is_none")]
    pub erc20_limit: Option<i32>,
    /// An object mapping erc1155 ids to maximum lifetime transfer limits of each permitted item id supplied for this contract address.
    #[serde(rename = "erc1155Limits", skip_serializing_if = "Option::is_none")]
    pub erc1155_limits: Option<::std::collections::HashMap<String, i32>>,
}

impl ProfilePermissionsValue {
    /// Key should be the contract address, value is the permissions object request for the contract.
    pub fn new() -> ProfilePermissionsValue {
        ProfilePermissionsValue {
            chain: None,
            scopes: None,
            functions: None,
            erc20_limit: None,
            erc1155_limits: None,
        }
    }
}


